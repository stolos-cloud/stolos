services:
  postgres:
    image: postgres:17.6-alpine3.22
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-stolos}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - stolos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 3s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: stolos-backend
    env_file:
      - ./backend/.env
    environment:
      - ADMIN_EMAIL=admin@example.com
      - ADMIN_PASSWORD=Admin123!
      - TALOS_FOLDER=/app/talos-configs
    volumes:
      - gitops_workspace:/root/gitops-workspace
      - ./backend/talos-configs:/app/talos-configs:ro
    ports:
      - "8080:8080"
      - "10.0.0.4:8082:8082" # update to your vpn ip
    networks:
      - stolos-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stolos-frontend
    environment:
      - API_URL=http://backend:8080/api/v1
    ports:
      - "3000:80"
    networks:
      - stolos-network
    depends_on:
      - backend
    restart: unless-stopped

networks:
  stolos-network:
    driver: bridge

volumes:
  postgres_data:
  gitops_workspace:
